---
title: "CulexT DE"
format: html
---
# Setup
## Dependencies
```{r setup}
library(BiocManager)
Biocpackages = c("DESeq2")
for (pkg in Biocpackages) {
    if (!require(pkg,quietly=T,character.only = T)) {
        BiocManager::install(pkg)
        library(pkg,character.only = T)
    }
}
library(tidyverse)
library(dplyr)
library(stringr)
library(magrittr)
```

## Data
```{r }
cleanUpNames <- function(colnames) {
  colnames %>%
    str_replace("^X", "T") %>%                  # Replace leading "X" â†’ "T"
    str_remove("_S\\d+HSCounts\\.txt$")         # Remove suffix "_S5HSCounts.txt"
  
}
```
```{r read-csvs}
countfile = "Hunter_Results/EG_Raw_Counts.csv"
df = read.table(countfile, sep=',', header=T,row.names=1)
colnames(df) <- cleanUpNames(colnames(df))
count_mat <- df %>% as.matrix()
storage.mode(count_mat) <- "integer"

hunter_norm_counts = read.table("Hunter_Results/EG_Normalized_Counts.csv", sep = ',', header=T, row.names=1)
colnames(hunter_norm_counts) <- cleanUpNames(colnames(hunter_norm_counts))
```

### Build metadata table with factors
```{r build-sample-metadata}
coldata <- tibble(sample = colnames(count_mat)) %>%
  mutate( # extract the factor values from the column names
    temperature = str_extract(sample, "(?<=T)\\d+"),     # 22, 26, 30
    infection   = str_extract(sample, "mock|WNV"),       # infection type
    replicate   = str_extract(sample, "[A-Z]$")          # replicate ID (A, B, C)
  ) %>%
  mutate( # make factors out of the levels
    temperature = factor(temperature, levels = c("26", "22", "30")), 
    infection = factor(infection, levels = c("mock", "WNV"))
  ) %>%
  mutate( # make the combined factor variable
    condition = factor(paste0("T", temperature, "_", infection))
  ) %>%
  column_to_rownames("sample")

coldata
```

### DESeq2 object
```{r create-object}
dds <- DESeqDataSetFromMatrix(
  countData = count_mat,
  colData   = coldata,
  design    = ~ condition
)
dds <- DESeq(dds)

resultsNames(dds)
```

```{r norm counts}
dds <- estimateSizeFactors(dds)
norm_counts <- counts(dds, normalized = TRUE)
log_norm_counts <- log2(norm_counts + 1)
```

```{r compare-w-hunter}
max(abs(norm_counts - hunter_norm_counts)) # extremely small value
```

```{r all-pairwise}
# Get all levels of the condition factor
conds <- levels(colData(dds)$condition)

# Generate all unique pairwise combinations
comparisons <- combn(conds, 2, simplify = FALSE)

# For each pairwise contrast, extract results
res_list <- lapply(comparisons, function(x) {
  contrast_name <- paste(x[1], "vs", x[2])
  res <- results(dds, contrast = c("condition", x[1], x[2]))
  res_df <- as.data.frame(res) %>%
    rownames_to_column("gene_id") %>%
    mutate(comparison = contrast_name,
           compare_from = x[1], 
        compare_to = x[2])
  return(res_df)
})

# Combine all results into one tidy dataframe
all_res <- bind_rows(res_list)
```

```{r global results}
# tabulate number of "significant" genes
all_res %>%
  filter(padj < 0.1) %>%
  count(comparison, sort = TRUE)
```

```{r compare results with Hunters}
root_dir = 'Hunter_Results/geneID_DifferentialExpressionResults'
for (Hfile in list.files(root_dir, pattern="*_FC.csv")) {
    filename_noext = str_remove(Hfile, "_DE_FC\\.csv$")
    # split on underscore
    parts = str_split(filename_noext, "_")
    condition_from = map_chr(parts, 1)
    condition_to   = map_chr(parts, 2)
    # convert to your target naming style (T22_mock, etc.)
    condition_from = str_replace(condition_from, "(\\D+)(\\d+)", "T\\2_\\1")
    condition_to   = str_replace(condition_to, "(\\D+)(\\d+)", "T\\2_\\1")
    # lowercase 'mock' only
    condition_from = str_replace(condition_from, "Mock", "mock")
    condition_to   = str_replace(condition_to, "Mock", "mock")
    cat(paste(condition_from, condition_to, sep=" ")," ")
    Hdata = read.table(file.path(root_dir, Hfile), sep=',', header=T, row.names=1) %>%
        rownames_to_column("gene_id") %>% 
        arrange(gene_id)
    Ddata = all_res %>% filter(compare_from == condition_from & compare_to == condition_to) %>% 
            arrange(gene_id)
    cat(max(abs(Hdata$log2FoldChange - Ddata$log2FoldChange), na.rm=T),"   ")
    cat(max(abs(Hdata$padj - Ddata$padj), na.rm=T),"   ")
    cat(sum(Hdata$padj < .1,na.rm=T),"   ", sum(Ddata$padj < .1,na.rm=T))
    cat("\n")
}
```